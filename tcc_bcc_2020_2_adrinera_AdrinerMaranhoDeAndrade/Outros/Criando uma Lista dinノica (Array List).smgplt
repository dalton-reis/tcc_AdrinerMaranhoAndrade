{"id":"4273b6dc-d504-4988-b9f9-ba9533d74187","name":"Criando uma Lista dinâmica (Array List)","description":"<p>&nbsp;&nbsp;Uma&nbsp;lista&nbsp;dinâmica,&nbsp;popularmente&nbsp;conhecida&nbsp;como&nbsp;Array&nbsp;List,&nbsp;é&nbsp;uma&nbsp;estrutura&nbsp;de&nbsp;dados&nbsp;indexada&nbsp;onde&nbsp;os&nbsp;elementos&nbsp;podem&nbsp;ser&nbsp;obtidos&nbsp;através&nbsp;de&nbsp;um&nbsp;acesso&nbsp;direto.&nbsp;Ela&nbsp;trabalha&nbsp;realizando&nbsp;um&nbsp;realocamento&nbsp;de&nbsp;espaço&nbsp;a&nbsp;partir&nbsp;de&nbsp;um&nbsp;tamanho&nbsp;inicial&nbsp;pre-fixado,&nbsp;permitindo&nbsp;a&nbsp;adição&nbsp;e&nbsp;remoção&nbsp;de&nbsp;novos&nbsp;elementos,&nbsp;de&nbsp;maneira&nbsp;que&nbsp;o&nbsp;consumidor&nbsp;não&nbsp;se&nbsp;preocupe&nbsp;com&nbsp;o&nbsp;gerenciamento&nbsp;do&nbsp;espaço.</p><p><br></p><p>&nbsp;&nbsp;Devido&nbsp;às&nbsp;suas&nbsp;características,&nbsp;as&nbsp;listas&nbsp;dinâmicas&nbsp;são&nbsp;altamente&nbsp;performáticas&nbsp;ao&nbsp;obter&nbsp;elementos,&nbsp;pelo&nbsp;fato&nbsp;dos&nbsp;elementos&nbsp;estarem&nbsp;em&nbsp;endereços&nbsp;já&nbsp;definidos.&nbsp;Por&nbsp;outro&nbsp;lado,&nbsp;essa&nbsp;abstração&nbsp;vem&nbsp;com&nbsp;um&nbsp;custo.&nbsp;O&nbsp;gerenciamento&nbsp;da&nbsp;estrutura&nbsp;consome&nbsp;processamento&nbsp;ao&nbsp;adicionar&nbsp;e&nbsp;remover&nbsp;elementos.&nbsp;Além&nbsp;disso,&nbsp;o&nbsp;consumo&nbsp;de&nbsp;memória&nbsp;será&nbsp;relativo&nbsp;ao&nbsp;espaço&nbsp;alocado&nbsp;e&nbsp;não&nbsp;a&nbsp;quantidade&nbsp;de&nbsp;elementos&nbsp;na&nbsp;lista.</p>","classContract":{"name":"ListaDinamica","fields":[{"name":"vetor","description":"Vetor onde serão guardados os elementos"},{"name":"tamanho","description":"Tamanho da lista"}],"methods":[{"name":"inicializar","parameters":"fatorInicial","description":"Inicializa a lista. O fatorInicial indica o tamanho inicial do vetor."},{"name":"adicionar","parameters":"elemento","description":"Adiciona um elemento na lista"},{"name":"remover","parameters":"elemento","description":"Remove um elemento da lista"},{"name":"contem","parameters":"elemento","description":"Verifica se um elemento existe na lista"},{"name":"obter","parameters":"posicao","description":"Retorna o elemento presente na posição informada"},{"name":"obterTamanho","parameters":"","description":"Retorna o tamanho da lista"}]},"scenarios":[{"id":"09c39797-27b4-49aa-8cd9-f7025c2f1195","name":"Adicionar","description":"Este cenário adiciona 6 elementos na lista. O crescimento do vetor deve ser sempre o dobro do tamanho anterior.","code":"listaDinamica.inicializar(2);\r\n\r\nlistaDinamica.adicionar(1);\r\nlistaDinamica.adicionar(2);\r\nlistaDinamica.adicionar(3);\r\ncontext.clear(context.getContainers()[0]);\r\nlistaDinamica.adicionar(4);\r\nlistaDinamica.adicionar(5);\r\ncontext.clear(context.getContainers()[0]);\r\nlistaDinamica.adicionar(6);\r\n\r\nconst objects = context.getObjects();\r\nconst containers = context.getContainers();\r\nconst primitives = context.getPrimitives();\r\n\r\nassertion.assertEquals(0, objects.length, 'Não podem ser utilizados containers nesse problema.');\r\nassertion.assertEquals(8, containers[0].properties.size, 'O tamanho do segundo container deveria ser 6.');\r\nassertion.assertEquals(1, containers[0].container[0], 'O primeiro elemento deveria ser 1.');\r\nassertion.assertEquals(2, containers[0].container[1], 'O segundo elemento deveria ser 2.');\r\nassertion.assertEquals(3, containers[0].container[2], 'O terceiro elemento deveria ser 3.');\r\nassertion.assertEquals(4, containers[0].container[3], 'O quarto elemento deveria ser 4.');\r\nassertion.assertEquals(5, containers[0].container[4], 'O quinto elemento deveria ser 5.');\r\nassertion.assertEquals(6, containers[0].container[5], 'O sexto elemento deveria ser 6.');\r\nassertion.assertEquals(6, listaDinamica.obterTamanho(), 'O tamanho da lista deveria ser 6.');"},{"id":"2d85a133-0ebd-4e5e-b403-45b028e56197","name":"Remover","description":"Este cenário realiza a inserção de 6 elementos na lista. Logo após um dos elementos é removido.","code":"listaDinamica.inicializar(3);\r\n\r\nlistaDinamica.adicionar(1);\r\nlistaDinamica.adicionar(2);\r\nlistaDinamica.adicionar(3);\r\nlistaDinamica.adicionar(4);\r\ncontext.clear(context.getContainers()[0]);\r\nlistaDinamica.adicionar(5);\r\nlistaDinamica.adicionar(6);\r\n\r\nlistaDinamica.remover(4);\r\n\r\nconst containers = context.getContainers();\r\n\r\nassertion.assertEquals(5, listaDinamica.obterTamanho(), 'O primeiro da lista deveria ser 5.');\r\nassertion.assertEquals(1, containers[0].container[0], 'O primeiro elemento deveria ser 1.');\r\nassertion.assertEquals(2, containers[0].container[1], 'O segundo elemento deveria ser 2.');\r\nassertion.assertEquals(3, containers[0].container[2], 'O terceiro elemento deveria ser 3.');\r\nassertion.assertEquals(5, containers[0].container[3], 'O quarto elemento deveria ser 5.');\r\nassertion.assertEquals(6, containers[0].container[4], 'O quinto elemento deveria ser 6.');"},{"id":"17e9a17f-972f-454d-bc24-340990c669d2","name":"Obter","description":"Este cenário realiza a inserção de 4 elementos na lista. \nApós isso ele obtem um dos elementos.","code":"listaDinamica.inicializar(2);\r\n\r\nlistaDinamica.adicionar(1);\r\nlistaDinamica.adicionar(2);\r\nlistaDinamica.adicionar(4);\r\ncontext.clear(context.getContainers()[0]);\r\nlistaDinamica.adicionar(5);\r\n\r\nassertion.assertEquals(4, listaDinamica.obterTamanho(), 'O primeiro da lista deveria ser 5.');\r\nassertion.assertEquals(4, listaDinamica.obter(2), 'O terceiro elemento deveria ser 4.');"},{"id":"453a25d9-d45a-43d7-b79f-98e76d16122d","name":"Contém","description":"Este cenário realiza a inserção de 4 elementos na lista. \nApós ele verifica se a lista contém o número 2 e se não contem um número não existente.","code":"listaDinamica.inicializar(2);\r\n\r\nlistaDinamica.adicionar(1);\r\nlistaDinamica.adicionar(2);\r\nlistaDinamica.adicionar(3);\r\ncontext.clear(context.getContainers()[0]);\r\nlistaDinamica.adicionar(4);\r\n\r\n\r\nassertion.assertEquals(4, listaDinamica.obterTamanho(), 'O primeiro da lista deveria ser 5.');\r\nassertion.assertEquals(true, listaDinamica.contem(2), 'A lista deveria conter o elemento 2.');\r\nassertion.assertEquals(false, listaDinamica.contem(6), 'A lista não deveria conter o elemento 6.');"}],"solution":"class ListaDinamica {\n\n\t/**\n\t * Vetor onde serão guardados os elementos\n\t */\n\tvetor;\n\t/**\n\t * Tamanho da lista\n\t */\n\ttamanho;\n\n\tconstructor() {}\n\n\t/**\n\t * Inicializa a lista. O fatorInicial indica o tamanho inicial do vetor.\n\t */\n\tinicializar(fatorInicial) {\n\t\tthis.vetor = context.newContainer(fatorInicial);\n\t\tthis.tamanho = 0;\n\t}\n\n\t/**\n\t * Adiciona um elemento na lista\n\t */\n\tadicionar(elemento) {\n\t\tconst tamanhoAtual = this.vetor.size();\n\t\tif (tamanhoAtual === this.tamanho) {\n\t\t\tconst novoVetor = context.newContainer(tamanhoAtual * 2);\n\t\t\tfor (let i = 0; i < tamanhoAtual; i++) {\n\t\t\t\tnovoVetor.set(i, this.vetor.get(i));\n\t\t\t}\n\t\t\tthis.vetor = novoVetor;\n\t\t}\n\t\tthis.vetor.set(this.tamanho++, elemento);\n\t}\n\t/**\n\t * Remove um elemento da lista\n\t */\n\tremover(elemento) {\n\t\tfor (let i = 0; i < this.tamanho; i++) {\n\t\t\tif (this.vetor.get(i) === elemento) {\n\t\t\t\tthis.vetor.set(i, null);\n\t\t\t\tfor (let y = i + 1; y < this.tamanho; y++) {\n\t\t\t\t\tthis.vetor.set(y - 1, this.vetor.get(y));\n\t\t\t\t\tthis.vetor.set(y, null);\n\t\t\t\t}\n\t\t\t\tthis.tamanho--;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Verifica se um elemento existe na lista\n\t */\n\tcontem(elemento) {\n\t\tfor (let i = 0; i < this.tamanho; i++) {\n\t\t\tif (this.vetor.get(i) === elemento) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Retorna o elemento presente na posição informada\n\t */\n\tobter(posicao) {\n\t\treturn this.vetor.get(posicao);\n\t}\n\t/**\n\t * Retorna o tamanho da lista\n\t */\n\tobterTamanho() {\n\t\treturn this.tamanho;\n\t}\n\n}"}